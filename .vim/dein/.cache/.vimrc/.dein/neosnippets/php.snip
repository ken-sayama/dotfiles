# Debug message {{{
snippet log
abbr Echo debug helper in console
	echo('['. __class__ .':'. __function__ .':'. __line__ .']$0:'. print_r(${0}, true) ."\n");
snippet logg
abbr Exit Echo debug helper in console
	echo('['. __class__ .':'. __function__ .':'. __line__ .']$0:'. print_r(${0}, true) ."\n");exit(9);
snippet logmsg
abbr Log template
	'['. __class__ .':'. __function__ .':'. __line__ .']:'
snippet logbr
abbr Echo debug helper in HTML
	echo('['. __class__ .':'. __function__ .':'. __line__ .']$0:'. print_r(${0}, true) .'<br />');
snippet logfile
abbr Output logfile debug helper
	file_put_contents('/tmp/sniplog', '<'.date('Y-m-d H:i:s').'>['. __class__ .':'. __function__ .':'. __line__ .']$0:'. print_r(${0}, true) ."\n",FILE_APPEND|LOCK_EX);
snippet cilog
abbr Codeigniter log template
	log_message('debug', '['. __class__ .':'. __function__ .':'. __line__ .']$0:'. print_r(${0}, true));
snippet pd
abbr Dumb debug helper in HTML
	echo('<pre>');var_dump(${0:variable});echo('</pre>');
snippet pdd
abbr Exit Dumb debug helper in HTML
	echo('<pre>');var_dump(${0:variable});echo('</pre>');exit(9);
snippet vd
abbr dumb debug helper
	var_dump(${0:variable});
snippet vdd
abbr Exit dumb debug helper
	var_dump(${0:variable});exit(9);
snippet logtest
abbr phpunit
	fwrite(STDERR, "\n[". __class__ .':'. __function__ .':'. __line__ .']$0:'. print_r(${0}, true) ."\n");
#}}}

# Reserved word {{{
snippet C
abbr Env variable COOKIE
	$_COOKIE['${0:key}']
snippet E
abbr Env variable ENV
	$_ENV['${0:key}']
snippet F
abbr Env variable FILES
	$_FILES['${0:key}']
snippet G
abbr Env variable GET
	$_GET['${0:key}']
snippet P
abbr Env variable POST
	$_POST['${0:key}']
snippet R
abbr Env variable REQUEST
	$_REQUEST['${0:key}']
snippet S
abbr Env variable SERVER
	$_SERVER['${0:key}']
snippet SS
abbr Env variable SESSION
	$_SESSION['${0:key}']
#}}}

# Language control structures {{{
snippet inc
abbr include
	include '${0:file}';
snippet inc1
abbr include_once
	include_once '${0:file}';
snippet req
abbr require
	require '${0:file}';
snippet req1
abbr require_once
	require_once '${0:file}';
snippet def
abbr define
	define('${1:variable}', ${0:value});
#}}}

# Visibility {{{
snippet public
abbr Public Visibility
	public ${1:static }${0}
snippet protected
abbr Protected Visibility
	protected ${1:static }${0}
snippet private
abbr Private Visibility
	private ${1:static }${0}
#}}}

# Class {{{
snippet class
abbr Class default
	<?php
	final class `expand("%:r")`
	{
		// Class variable {{{
		//}}}
	
		public function __construct(${2}) //{{{
		{
			${0:parent::__construct();}
		} //}}}
	
		public function __destruct() //{{{
		{
			${3:parent::__destruct();}
		} //}}}
	}
snippet class_variable
abbr Class variable
	// Class variable {{{
	//}}}
snippet const_set
abbr const set
	const ${1:variable} = ${2:value};

	public static function get${3:Name}Array(): array //{{{
	{
		return [
			self::${1}${4: => ''},
		];
	} //}}}
#}}}

# Function {{{
snippet public_function
abbr Public Function
	public ${1:static }function ${2}(${3})${4:type hinting} //{{{
	{
		${0://code...}
	} //}}}
snippet protected_function
abbr Protected Function
	protected ${1:static }function ${2}(${3})${4:type hinting} //{{{
	{
		${0://code...}
	} //}}}
snippet private_function
abbr Private_Function
	private ${1:static }function _${2}(${3})${4:type hinting} //{{{
	{
		${0://code...}
	} //}}}
snippet construct "__construct"
abbr __construct
	public function __construct(${1}) //{{{
	{
		${0:parent::__construct();}
	} //}}}
snippet setter
abbr Setter
	public function set${1:camelCase}($${0:value}): void //{{{
	{
		$this->_$0 = $$0;
	} //}}}
snippet getter
abbr Getter
	public function get${1:camelCase}()${2:type hinting} //{{{
	{
		return $this->_${0:value};
	} //}}}
snippet sgetter
abbr Setter and Getter
	public function set${1:camelCase}($${2:value}): void //{{{
	{
		$this->_$2 = $$2;
	} //}}}

	public function get$1()${0:type hinting} //{{{
	{
		return $this->_$2;
	} //}}}
snippet gsetter
abbr Setter and Getter
	public function set${1:camelCase}($${2:value}): void //{{{
	{
		$this->_$2 = $$2;
	} //}}}

	public function get$1()${0:type hinting} //{{{
	{
		return $this->_$2;
	} //}}}
#}}}

# foreach {{{
snippet foreach
abbr foreach array as value
	foreach (${1:array} as ${2:value}) {
		${0://code...}
	}
snippet foreachk
abbr foreach array as key => value
	foreach (${1:array} as ${2:key} => ${3:value}) {
		${0://code...}
	}
snippet bforeach
abbr block foreach array as value
	<?php
	foreach (${1:array} as ${2:value}): ?>
		${0://code...}<?php
	endforeach; ?>
snippet bforeachk
abbr block foreach array as key => value
	<?php
	foreach (${1:array} as ${2:key} => ${3:value}): ?>
		${0://code...}<?php
	endforeach; ?>
#}}}

# for {{{
snippet for
abbr for
	for (${1:index} = 0; $1 < ${2}; $1${3:++}) {
		${0://code...}
	}
snippet bfor
abbr block for
	<?php
	for (${1:index} = 0; $1 < ${2}; $1${3:++}):
		${0://code...}<?php
	endfor; ?>
#}}}

# while {{{
snippet while
abbr while
	while (${1:/* condition */}) {
		${0://code...}
	}
snippet bwhile
abbr block while
	<?php
	while (${1:/* condition */}):
		${0://code...}<?php
	endwhile; ?>
#}}}

# if {{{
snippet if
abbr if
	if (${1:/* condition */}) {
		${0://code...}
	}
snippet else
abbr else
	else {
		${0://code...}
	}
snippet elseif
abbr elseif
	elseif (${1:/* condition */}) {
		${0://code...}
	}
snippet bif
abbr blcok if
	<?php
	if (${1:/* condition */}):
		${0://code...}<?php
	endif; ?>
snippet belse
abbr block else
	<?php
	else: ?>
		${0://code...}<?php
	endif; ?>
snippet belseif
abbr block elseif
	<?php
	elseif (${1:/* condition */}):
		${0://code...}<?php
	endif; ?>
#}}}

# switch {{{
snippet switch
abbr switch
	switch (${1:variable}) {
	case ${2:/* condition */}:
		${0://code...}
		break;
	default:
		break;
	}
snippet case
abbr switch - case
	case ${1:/* condition */}:
		${0://code...}
		break;
snippet bswitch
abbr block switch
	<?php
	switch (${1:variable}):
	case ${2:/* condition */}:
		${0://code...}
		break;
	default:
		break;
	endswitch; ?>
#}}}

# try {{{
snippet throw
abbr throw
	throw new Exception(${0://message...});
snippet try
abbr try
	try {
		${0://code...}
	} catch (Exception $e) {
		$e->getMessage()
	}
snippet finally
abbr finally
	finally {
	}
#}}}

# FILE {{{
snippet csv
abbr csv
	$mp = fopen('php://memory', 'bw+');
	foreach (${1:array} as ${2:value}) {
		fputcsv($mp, $2, ${3:','}, ${4:'"'});
	}
	rewind($mp);
	${0://$buf = str_replace("\n", "\r\n", stream_get_contents($mp));}
	$buf = stream_get_contents($mp);
	fclose($mp);

	$fp = fopen(${5:file}, 'w');
	fwrite($fp, $buf);
	fclose($fp);
#}}}

# tips {{{
snippet delete_space_new_line
abbr delete space new line
	${1:array} = array_filter(array_map('trim', explode("\n", str_replace(["\r\n","\r","\n"], "\n", ${0:string}))), 'strlen');
snippet array_sort
abbr array sort
	if(array_multisort(array_column(${1:array}, '${2:key}'), SORT_ASC, $1) === false) {
		throw new Exception(${3://message...});
	}
snippet json_response
abbr json response
	header('Content-Type:application/json;charset=utf-8');
	echo json_encode(${0:value});
#}}}

# vim:fdl=0:ft=neosnippet
